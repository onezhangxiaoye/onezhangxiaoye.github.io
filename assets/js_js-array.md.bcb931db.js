import{_ as e,o as r,c as a,a as l}from"./app.b90595f9.js";const y=JSON.parse('{"title":"JS Array","description":"","frontmatter":{"title":"JS Array","date":"2021-01-19T15:06:47.000Z","lastmod":"2021-01-19T15:06:47.000Z","author":"ZhangXiaoYe","avatar":"/images/avatar.png","authorlink":"http://cai12317.gitee.io/blog","cover":"/images/js/array.png","categories":["JS"],"tags":["JS","Array"]},"headers":[{"level":2,"title":"主动改变原数组","slug":"主动改变原数组","link":"#主动改变原数组","children":[{"level":3,"title":"copyWithin6️⃣🤔🔗","slug":"copywithin6️⃣🤔🔗","link":"#copywithin6️⃣🤔🔗","children":[]},{"level":3,"title":"fill6️⃣🤔🔗","slug":"fill6️⃣🤔🔗","link":"#fill6️⃣🤔🔗","children":[]},{"level":3,"title":"pop🤔🔗","slug":"pop🤔🔗","link":"#pop🤔🔗","children":[]},{"level":3,"title":"push🤔🔗","slug":"push🤔🔗","link":"#push🤔🔗","children":[]},{"level":3,"title":"reverse🤔🔗","slug":"reverse🤔🔗","link":"#reverse🤔🔗","children":[]},{"level":3,"title":"shift🤔🔗","slug":"shift🤔🔗","link":"#shift🤔🔗","children":[]},{"level":3,"title":"sort🤔🔗","slug":"sort🤔🔗","link":"#sort🤔🔗","children":[]},{"level":3,"title":"unshift🤔🔗","slug":"unshift🤔🔗","link":"#unshift🤔🔗","children":[]}]},{"level":2,"title":"不主动改变原数组","slug":"不主动改变原数组","link":"#不主动改变原数组","children":[{"level":3,"title":"concat✅🔗","slug":"concat✅🔗","link":"#concat✅🔗","children":[]},{"level":3,"title":"entries|keys|values6️⃣✅🔗","slug":"entries-keys-values6️⃣✅🔗","link":"#entries-keys-values6️⃣✅🔗","children":[]},{"level":3,"title":"every✅🔗","slug":"every✅🔗","link":"#every✅🔗","children":[]},{"level":3,"title":"filter✅🔗","slug":"filter✅🔗","link":"#filter✅🔗","children":[]},{"level":3,"title":"find6️⃣✅🔗","slug":"find6️⃣✅🔗","link":"#find6️⃣✅🔗","children":[]},{"level":3,"title":"findIndex6️⃣✅🔗","slug":"findindex6️⃣✅🔗","link":"#findindex6️⃣✅🔗","children":[]},{"level":3,"title":"forEach✅🔗","slug":"foreach✅🔗","link":"#foreach✅🔗","children":[]},{"level":3,"title":"includes6️⃣✅🔗","slug":"includes6️⃣✅🔗","link":"#includes6️⃣✅🔗","children":[]},{"level":3,"title":"indexOf✅🔗","slug":"indexof✅🔗","link":"#indexof✅🔗","children":[]},{"level":3,"title":"join✅🔗","slug":"join✅🔗","link":"#join✅🔗","children":[]},{"level":3,"title":"lastIndexOf✅🔗","slug":"lastindexof✅🔗","link":"#lastindexof✅🔗","children":[]},{"level":3,"title":"map✅🔗","slug":"map✅🔗","link":"#map✅🔗","children":[]},{"level":3,"title":"reduce✅🔗","slug":"reduce✅🔗","link":"#reduce✅🔗","children":[]},{"level":3,"title":"reduceRight✅🔗","slug":"reduceright✅🔗","link":"#reduceright✅🔗","children":[]},{"level":3,"title":"map✅🔗","slug":"map✅🔗-1","link":"#map✅🔗-1","children":[]},{"level":3,"title":"slice✅🔗","slug":"slice✅🔗","link":"#slice✅🔗","children":[]},{"level":3,"title":"some✅🔗","slug":"some✅🔗","link":"#some✅🔗","children":[]}]}],"relativePath":"js/js-array.md","lastUpdated":1716447218000}'),o={name:"js/js-array.md"},i=l(`<h1 id="js-array-相关内容" tabindex="-1">js-array 相关内容 <a class="header-anchor" href="#js-array-相关内容" aria-hidden="true">#</a></h1><p>由于在<code>vue</code>的<code>computer</code>里面对其依赖的数组使用 <code>sort</code> ,导致无限循环触发了<code>computer</code>，而照成了浏览器崩溃。</p><blockquote><p>主动改变原数组 <code>copyWithin</code>|<code>fill</code>|<code>pop</code>|<code>push</code>|<code>reverse</code>|<code>shift</code>|<code>sort</code>|<code>unshift</code></p></blockquote><h2 id="主动改变原数组" tabindex="-1">主动改变原数组 <a class="header-anchor" href="#主动改变原数组" aria-hidden="true">#</a></h2><h3 id="copywithin6️⃣🤔🔗" tabindex="-1">copyWithin6️⃣🤔<a href="https://www.runoob.com/jsref/jsref-copywithin.html" target="_blank" rel="noreferrer">🔗</a> <a class="header-anchor" href="#copywithin6️⃣🤔🔗" aria-hidden="true">#</a></h3><ul><li><code>描述</code> 从数组的指定位置拷贝元素到数组的另一个指定位置中</li><li><code>语法</code> array.copyWithin(target, start?, end?)</li><li><code>返回值</code> 修改后的数组</li></ul><h3 id="fill6️⃣🤔🔗" tabindex="-1">fill6️⃣🤔<a href="https://es6.ruanyifeng.com/#docs/array#%E6%95%B0%E7%BB%84%E5%AE%9E%E4%BE%8B%E7%9A%84-fill" target="_blank" rel="noreferrer">🔗</a> <a class="header-anchor" href="#fill6️⃣🤔🔗" aria-hidden="true">#</a></h3><ul><li><code>描述</code> 将一个固定值替换数组的元素</li><li><code>语法</code> array.fill(value, start?, end?)</li><li><code>返回值</code> 修改后的数组</li></ul><h3 id="pop🤔🔗" tabindex="-1">pop🤔<a href="https://www.runoob.com/jsref/jsref-pop.html" target="_blank" rel="noreferrer">🔗</a> <a class="header-anchor" href="#pop🤔🔗" aria-hidden="true">#</a></h3><ul><li><code>描述</code> 删除数组的最后一个元素并返回删除的元素</li><li><code>语法</code> array.pop()</li><li><code>返回值</code> 返回删除的元素</li></ul><h3 id="push🤔🔗" tabindex="-1">push🤔<a href="https://www.runoob.com/jsref/jsref-push.html" target="_blank" rel="noreferrer">🔗</a> <a class="header-anchor" href="#push🤔🔗" aria-hidden="true">#</a></h3><ul><li><code>描述</code> 向数组的末尾添加一个或多个元素，并返回新的长度</li><li><code>语法</code> array.push(item1, item2, ..., itemX)</li><li><code>返回值</code> 数组新长度</li></ul><h3 id="reverse🤔🔗" tabindex="-1">reverse🤔<a href="https://www.runoob.com/jsref/jsref-reverse.html" target="_blank" rel="noreferrer">🔗</a> <a class="header-anchor" href="#reverse🤔🔗" aria-hidden="true">#</a></h3><ul><li><code>描述</code> 颠倒数组中元素的顺序</li><li><code>语法</code> array.reverse()</li><li><code>返回值</code> 颠倒顺序后的数组</li></ul><h3 id="shift🤔🔗" tabindex="-1">shift🤔<a href="https://www.runoob.com/jsref/jsref-shift.html" target="_blank" rel="noreferrer">🔗</a> <a class="header-anchor" href="#shift🤔🔗" aria-hidden="true">#</a></h3><ul><li><code>描述</code> 把数组的第一个元素从其中删除，并返回第一个元素的值</li><li><code>语法</code> array.shift()</li><li><code>返回值</code> 移除的元素</li></ul><h3 id="sort🤔🔗" tabindex="-1">sort🤔<a href="https://www.runoob.com/jsref/jsref-sort.html" target="_blank" rel="noreferrer">🔗</a> <a class="header-anchor" href="#sort🤔🔗" aria-hidden="true">#</a></h3><ul><li><code>描述</code> 对数组的元素进行排序</li><li><code>语法</code> array.sort(function(item1, item2))</li><li><code>返回值</code> 排序后的数组</li></ul><h3 id="unshift🤔🔗" tabindex="-1">unshift🤔<a href="https://www.runoob.com/jsref/jsref-unshift.html" target="_blank" rel="noreferrer">🔗</a> <a class="header-anchor" href="#unshift🤔🔗" aria-hidden="true">#</a></h3><ul><li><code>描述</code> 向数组的开头添加一个或更多元素，并返回新的长度</li><li><code>语法</code> array.unshift(item1,item2, ..., itemX)</li><li><code>返回值</code> 数组新长度</li></ul><h2 id="不主动改变原数组" tabindex="-1">不主动改变原数组 <a class="header-anchor" href="#不主动改变原数组" aria-hidden="true">#</a></h2><h3 id="concat✅🔗" tabindex="-1">concat✅<a href="https://www.runoob.com/jsref/jsref-concat-array.html" target="_blank" rel="noreferrer">🔗</a> <a class="header-anchor" href="#concat✅🔗" aria-hidden="true">#</a></h3><ul><li><code>描述</code> 连接两个或更多的数组，并返回结果。</li><li><code>语法</code> array1.concat(array2,array3,...,arrayX)</li><li><code>参数</code> 必需。该参数可以是具体的值，也可以是数组对象。可以是任意多个</li><li><code>返回值</code> 返回一个新的数组</li></ul><h3 id="entries-keys-values6️⃣✅🔗" tabindex="-1">entries|keys|values6️⃣✅<a href="https://es6.ruanyifeng.com/#docs/array#%E6%95%B0%E7%BB%84%E5%AE%9E%E4%BE%8B%E7%9A%84-entries%EF%BC%8Ckeys-%E5%92%8C-values" target="_blank" rel="noreferrer">🔗</a> <a class="header-anchor" href="#entries-keys-values6️⃣✅🔗" aria-hidden="true">#</a></h3><ul><li><code>描述</code>返回一个数组的迭代对象，该对象包含数组的键值对 (key/value)。迭代对象中数组的索引值作为 key， 数组元素作为 value</li><li><code>语法</code> array.entries()</li><li><code>参数</code> 无</li><li><code>返回值</code> 返回一个数组的迭代对象</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">index</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> elem</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">entries</span><span style="color:#A6ACCD;">()) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">index</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">elem</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 0 &quot;a&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 1 &quot;b&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">entries</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &quot;[object Array Iterator]&quot;</span></span>
<span class="line"></span></code></pre></div><h3 id="every✅🔗" tabindex="-1">every✅<a href="https://www.runoob.com/jsref/jsref-every.html" target="_blank" rel="noreferrer">🔗</a> <a class="header-anchor" href="#every✅🔗" aria-hidden="true">#</a></h3><ul><li><code>描述</code> 检测数组所有元素是否都符合指定条件（通过函数提供）</li><li><code>语法</code> array.every(function(currentValue,index,arr), thisValue?)</li><li><code>返回值</code> 布尔值</li></ul><h3 id="filter✅🔗" tabindex="-1">filter✅<a href="https://www.runoob.com/jsref/jsref-filter.html" target="_blank" rel="noreferrer">🔗</a> <a class="header-anchor" href="#filter✅🔗" aria-hidden="true">#</a></h3><ul><li><code>描述</code> 创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素</li><li><code>语法</code> array.filter(function(currentValue,index,arr), thisValue?)</li><li><code>返回值</code> 返回一个新的数组</li></ul><h3 id="find6️⃣✅🔗" tabindex="-1">find6️⃣✅<a href="https://es6.ruanyifeng.com/#docs/array#%E6%95%B0%E7%BB%84%E5%AE%9E%E4%BE%8B%E7%9A%84-find-%E5%92%8C-findIndex" target="_blank" rel="noreferrer">🔗</a> <a class="header-anchor" href="#find6️⃣✅🔗" aria-hidden="true">#</a></h3><ul><li><code>描述</code> 返回通过测试（函数内判断）的数组的第一个元素的值</li><li><code>语法</code> array.find(function(currentValue, index, arr),thisValue?)</li><li><code>返回值</code> 返回符合测试条件的第一个数组元素值，如果没有符合条件的则返回 <code>undefined</code></li></ul><h3 id="findindex6️⃣✅🔗" tabindex="-1">findIndex6️⃣✅<a href="https://es6.ruanyifeng.com/#docs/array#%E6%95%B0%E7%BB%84%E5%AE%9E%E4%BE%8B%E7%9A%84-find-%E5%92%8C-findIndex" target="_blank" rel="noreferrer">🔗</a> <a class="header-anchor" href="#findindex6️⃣✅🔗" aria-hidden="true">#</a></h3><ul><li><code>描述</code> 返回传入一个测试条件（函数）符合条件的数组第一个元素位置</li><li><code>语法</code> array.findIndex(function(currentValue, index, arr),thisValue?)</li><li><code>返回值</code> 返回符合测试条件的第一个数组元素索引，如果没有符合条件的则返回 -1</li></ul><h3 id="foreach✅🔗" tabindex="-1">forEach✅<a href="https://www.runoob.com/jsref/jsref-foreach.html" target="_blank" rel="noreferrer">🔗</a> <a class="header-anchor" href="#foreach✅🔗" aria-hidden="true">#</a></h3><ul><li><code>描述</code> 调用数组的每个元素，并将元素传递给回调函数</li><li><code>语法</code> array.forEach(function(currentValue, index, arr), thisValue?)</li><li><code>返回值</code> undefined</li></ul><h3 id="includes6️⃣✅🔗" tabindex="-1">includes6️⃣✅<a href="https://es6.ruanyifeng.com/#docs/array#%E6%95%B0%E7%BB%84%E5%AE%9E%E4%BE%8B%E7%9A%84-includes" target="_blank" rel="noreferrer">🔗</a> <a class="header-anchor" href="#includes6️⃣✅🔗" aria-hidden="true">#</a></h3><ul><li><code>描述</code> 判断一个数组是否包含一个指定的值，如果是返回 true，否则false</li><li><code>语法</code> arr.includes(searchElement, fromIndex?)</li><li><code>返回值</code> 布尔值</li></ul><h3 id="indexof✅🔗" tabindex="-1">indexOf✅<a href="https://www.runoob.com/jsref/jsref-indexof-array.html" target="_blank" rel="noreferrer">🔗</a> <a class="header-anchor" href="#indexof✅🔗" aria-hidden="true">#</a></h3><ul><li><code>描述</code> 返回数组中某个指定的元素位置</li><li><code>语法</code> array.indexOf(item, start?)</li><li><code>返回值</code> 元素在数组中的位置，如果没有搜索到则返回 -1</li></ul><h3 id="join✅🔗" tabindex="-1">join✅<a href="https://www.runoob.com/jsref/jsref-join.html" target="_blank" rel="noreferrer">🔗</a> <a class="header-anchor" href="#join✅🔗" aria-hidden="true">#</a></h3><ul><li><code>描述</code> 把数组中的所有元素转换一个字符串</li><li><code>语法</code> array.join(separator?)</li><li><code>返回值</code> 返回一个separator间隔的字符串</li></ul><h3 id="lastindexof✅🔗" tabindex="-1">lastIndexOf✅<a href="https://www.runoob.com/jsref/jsref-lastindexof-array.html" target="_blank" rel="noreferrer">🔗</a> <a class="header-anchor" href="#lastindexof✅🔗" aria-hidden="true">#</a></h3><ul><li><code>描述</code> 返回一个指定的元素在数组中最后出现的位置，从该数组的后面向前查找</li><li><code>语法</code> array.lastIndexOf(item, start?)</li><li><code>参数</code> 必需。该参数可以是具体的值，也可以是数组对象。可以是任意多个</li><li><code>返回值</code> 元素在数组中的位置，如果没有搜索到则返回 -1</li></ul><h3 id="map✅🔗" tabindex="-1">map✅<a href="https://www.runoob.com/jsref/jsref-map.html" target="_blank" rel="noreferrer">🔗</a> <a class="header-anchor" href="#map✅🔗" aria-hidden="true">#</a></h3><ul><li><code>描述</code> 返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值</li><li><code>语法</code> array.map(function(currentValue,index,arr), thisValue?)</li><li><code>返回值</code> 返回一个新的数组</li></ul><h3 id="reduce✅🔗" tabindex="-1">reduce✅<a href="https://www.runoob.com/jsref/jsref-concat-array.html" target="_blank" rel="noreferrer">🔗</a> <a class="header-anchor" href="#reduce✅🔗" aria-hidden="true">#</a></h3><h3 id="reduceright✅🔗" tabindex="-1">reduceRight✅<a href="https://www.runoob.com/jsref/jsref-concat-array.html" target="_blank" rel="noreferrer">🔗</a> <a class="header-anchor" href="#reduceright✅🔗" aria-hidden="true">#</a></h3><ul><li><code>描述</code> 方法接收一个函数作为累加器，数组中的每个值（从左到右|从右到左）开始缩减，最终计算为一个值</li><li><code>语法</code> array.(reduce|reduceRight)(function(total, currentValue, currentIndex, arr), initialValue?)</li><li><code>参数</code> 必需。该参数可以是具体的值，也可以是数组对象。可以是任意多个</li><li><code>返回值</code> 返回计算结果</li></ul><h3 id="map✅🔗-1" tabindex="-1">map✅<a href="https://www.runoob.com/jsref/jsref-map.html" target="_blank" rel="noreferrer">🔗</a> <a class="header-anchor" href="#map✅🔗-1" aria-hidden="true">#</a></h3><ul><li><code>描述</code> 返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值</li><li><code>语法</code> array.map(function(currentValue,index,arr), thisValue?)</li><li><code>返回值</code> 返回一个新的数组</li></ul><h3 id="slice✅🔗" tabindex="-1">slice✅<a href="https://www.runoob.com/jsref/jsref-slice-array.html" target="_blank" rel="noreferrer">🔗</a> <a class="header-anchor" href="#slice✅🔗" aria-hidden="true">#</a></h3><ul><li><code>描述</code> 从已有的数组中返回选定的元素</li><li><code>语法</code> array.slice(start?, end?)</li><li><code>返回值</code> 返回一个新的数组，包含从 start 到 end</li></ul><h3 id="some✅🔗" tabindex="-1">some✅<a href="https://www.runoob.com/jsref/jsref-some.html" target="_blank" rel="noreferrer">🔗</a> <a class="header-anchor" href="#some✅🔗" aria-hidden="true">#</a></h3><ul><li><code>描述</code> 检测数组中的元素是否满足指定条件（函数提供）</li><li><code>语法</code> array.some(function(currentValue,index,arr),thisValue?)</li><li><code>返回值</code> 布尔值</li></ul>`,55),n=[i];function s(t,c,d,h,p,u){return r(),a("div",null,n)}const m=e(o,[["render",s]]);export{y as __pageData,m as default};
