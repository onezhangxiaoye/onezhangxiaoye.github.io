import{_ as s,c as i,o as a,a1 as e}from"./chunks/framework.DSzkhk7e.js";const g=JSON.parse('{"title":"webpack笔记","description":"","frontmatter":{},"headers":[],"relativePath":"webpack/webpack.md","filePath":"webpack/webpack.md","lastUpdated":1716447218000}'),n={name:"webpack/webpack.md"},l=e(`<h1 id="webpack笔记" tabindex="-1">webpack笔记 <a class="header-anchor" href="#webpack笔记" aria-label="Permalink to &quot;webpack笔记&quot;">​</a></h1><p><a href="https://webpack.docschina.org/concepts/" target="_blank" rel="noreferrer">webpack</a> 是一个用于现代 <code>JavaScript</code> 应用程序的 静态模块打包工具。当 <code>webpack</code> 处理应用程序时，它会在内部从一个或多个入口点构建一个 依赖图(<code>dependency graph</code>)，然后将你项目中所需的每一个模块组合成一个或多个 <code>bundles</code>，它们均为静态资源，用于展示你的内容</p><h2 id="loader" tabindex="-1">loader <a class="header-anchor" href="#loader" aria-label="Permalink to &quot;loader&quot;">​</a></h2><p><a href="https://webpack.docschina.org/concepts/loaders/" target="_blank" rel="noreferrer">loader</a> 用于对模块的源代码进行转换。<code>loader</code> 可以使你在 <code>import</code> 或 &quot;<code>load(加载)</code>&quot; 模块时预处理文件。因此，<code>loader</code> 类似于其他构建工具中“任务(<code>task</code>)”，并提供了处理前端构建步骤的得力方式。<code>loader</code> 可以将文件从不同的语言（如 <code>TypeScript</code>）转换为 <code>JavaScript</code> 或将内联图像转换为 <code>data URL</code>。<code>loader</code> 甚至允许你直接在 <code>JavaScript</code> 模块中 <code>import CSS</code> 文件！</p><p><code>loader</code> 本质上是导出为函数的 <code>JavaScript</code> 模块。<a href="https://github.com/webpack/loader-runner" target="_blank" rel="noreferrer">loader runner</a> 会调用此函数，<strong>然后将上一个 <code>loader</code> 产生的结果或者资源文件传入进去</strong>。函数中的 <code>this</code> 作为上下文会被 <code>webpack</code> 填充，并且 <code>loader runner</code> 中包含一些实用的方法，比如可以使 <code>loader</code> 调用方式变为异步，或者获取 <code>query</code> 参数。</p><p>起始 <code>loader</code> 只有一个入参：资源文件的内容。<code>compiler</code> 预期得到最后一个 <code>loader</code> 产生的处理结果。这个处理结果应该为 <code>String</code> 或者 <code>Buffer</code>（能够被转换为 <code>string</code>）类型，代表了模块的 <code>JavaScript</code> 源码。另外，还可以传递一个可选的 <code>SourceMap</code> 结果（格式为 <code>JSON</code> 对象）。</p><p>如果是单个处理结果，可以在 <code>同步模式</code> 中直接返回。如果有多个处理结果，则必须调用 <code>this.callback()</code>。在 <code>异步模式</code> 中，必须调用 <code>this.async()</code> 来告知 <code>loader runner</code> <strong>等待异步结果</strong>，它会返回 <code>this.callback()</code> 回调函数。随后 <code>loader</code> 必须返回 <code>undefined</code> 并且调用该回调函数</p><ul><li><strong><code>同步loader</code></strong> 无论是 <code>return</code> 还是 <code>this.callback</code> 都可以同步地返回转换后的 <code>content</code> 值</li><li><strong><code>异步loader</code></strong> 使用 <code>this.async</code> 来获取 <code>callback</code> 函数</li><li><strong><code>raw loader</code></strong> 默认情况下，资源文件会被转化为 <code>UTF-8</code> 字符串，然后传给 <code>loader</code>。通过设置 <code>raw</code> 为 <code>true</code>，<code>loader</code> 可以接收原始的 <code>Buffer</code>，例如下面的 <code>ImageLoader</code></li></ul><h3 id="配置-loader" tabindex="-1">配置 loader <a class="header-anchor" href="#配置-loader" aria-label="Permalink to &quot;配置 loader&quot;">​</a></h3><p><a href="https://webpack.docschina.org/concepts/loaders/#configuration" target="_blank" rel="noreferrer">module.rules</a> 允许你在 <code>webpack</code> 配置中指定多个 <code>loader</code>。 这种方式是展示 <code>loader</code> 的一种简明方式，并且有助于使代码变得简洁和易于维护。同时让你对各个 <code>loader</code> 有个全局概览：</p><p><code>loader</code> 从右到左（或从下到上）地取值(evaluate)/执行(execute)。在下面的示例中，从 <code>sass-loader</code> 开始执行，然后继续执行 <code>css-loader</code>，最后以 <code>style-loader </code>为结束。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">scss</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        use: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          { loader: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;style-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            loader: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;css-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            options: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              modules: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          { loader: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sass-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h3 id="编写-loader" tabindex="-1">编写 loader <a class="header-anchor" href="#编写-loader" aria-label="Permalink to &quot;编写 loader&quot;">​</a></h3><p><a href="https://webpack.docschina.org/contribute/writing-a-loader/" target="_blank" rel="noreferrer">链接</a> <code>loader</code> 是导出为一个函数的 <code>node</code> 模块。该函数在 <code>loader</code> 转换资源的时候调用。给定的函数将调用 <code>Loader API</code>，并通过 <code>this</code> 上下文访问。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 最简单的一个loader</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FirstLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> source</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {FirstLoader}</span></span></code></pre></div><h3 id="编写一个最简单的-imageloader" tabindex="-1">编写一个最简单的 ImageLoader <a class="header-anchor" href="#编写一个最简单的-imageloader" aria-label="Permalink to &quot;编写一个最简单的 ImageLoader&quot;">​</a></h3><p>这个 <code>loader</code> 的作用是处理打包过程中的 <code>png</code> 图片</p><ol><li>生成图片</li><li>导出实际的图片路径</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> publicPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./ahsjkdhaj.png&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // this 上下文中有许多方法提供使用 this.emitfile 产生一个文件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // https://webpack.docschina.org/api/loaders/#thisemitfile</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emitFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ahsjkdhaj.png&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, source)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 这里参照的 https://github.com/webpack-contrib/file-loader/blob/master/src/index.js#L87</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`module.exports = &quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">publicPath</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;;\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.raw </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span></code></pre></div><h2 id="plugin" tabindex="-1">plugin <a class="header-anchor" href="#plugin" aria-label="Permalink to &quot;plugin&quot;">​</a></h2><p><strong>插件</strong> 是 <code>webpack</code> 的 <a href="https://github.com/webpack/tapable" target="_blank" rel="noreferrer">支柱</a> 功能。<code>Webpack</code> 自身也是构建于你在 <code>webpack</code> 配置中用到的 <strong>相同的插件系统</strong> 之上！</p><p>插件目的在于解决 <a href="https://webpack.docschina.org/concepts/loaders" target="_blank" rel="noreferrer">loader</a> 无法实现的其他事。Webpack 提供很多开箱即用的 <a href="https://webpack.docschina.org/plugins/" target="_blank" rel="noreferrer">插件</a>。</p><h3 id="compiler" tabindex="-1">compiler <a class="header-anchor" href="#compiler" aria-label="Permalink to &quot;compiler&quot;">​</a></h3><p><a href="https://webpack.docschina.org/api/compiler-hooks/" target="_blank" rel="noreferrer">Compiler</a> 模块是 <code>webpack</code> 的主要引擎，它通过 <code>CLI</code> 或者 <code>Node API</code> 传递的所有选项创建出一个 <code>compilation</code> 实例。 它扩展自 <code>Tapable</code> 类，用来注册和调用插件。 大多数面向用户的插件会首先在 <code>Compiler</code> 上注册。</p><p>在为 <code>webpack</code> 开发插件时，你可能需要知道每个钩子函数是在哪里调用的。想要了解这些内容，请在 <code>webpack</code> 源码中搜索 <code>hooks.&lt;hook name&gt;.call</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compiler.hooks.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hookName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.tap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tapAsync</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tapPromise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PluginName, cb)</span></span></code></pre></div><h3 id="compilation" tabindex="-1">compilation <a class="header-anchor" href="#compilation" aria-label="Permalink to &quot;compilation&quot;">​</a></h3><p><a href="https://webpack.docschina.org/api/compilation-hooks/" target="_blank" rel="noreferrer">Compilation</a> 模块会被 <code>Compiler</code> 用来创建新的 <code>compilation</code> 对象（或新的 <code>build</code> 对象）。<code> compilation</code> 实例能够访问所有的模块和它们的依赖（大部分是循环依赖）。 它会对应用程序的依赖图中所有模块， 进行字面上的编译(<code>literal compilation</code>)。 在编译阶段，模块会被加载(<code>load</code>)、封存(<code>seal</code>)、优化(<code>optimize</code>)、 分块(<code>chunk</code>)、哈希(<code>hash</code>)和重新创建(<code>restore</code>)。</p><p><code>Compilation</code> 类扩自 <code>Tapable</code>。 可以按照 <code>compiler</code> 钩子的相同方式来调用 <code>tap</code></p><p>和 <code>compiler</code> 用法相同，取决于不同的钩子类型， 所以也可以在某些钩子上访问 <code>tapAsync</code> 和 <code>tapPromise</code></p><h3 id="编写-plugin" tabindex="-1">编写 plugin <a class="header-anchor" href="#编写-plugin" aria-label="Permalink to &quot;编写 plugin&quot;">​</a></h3><p><code>webpack</code> 插件是一个具有 <code>apply</code> 方法的 <code>JavaScript</code> 对象。<code>apply</code> 方法会被 <code>webpack compiler</code> 调用，<strong>调用 <code>apply</code> 时会传入 <code>compiler</code></strong> ，并且在 整个 编译生命周期都可以访问 <code>compiler</code> 对象。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileListPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">option</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.option </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> option</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {import(&#39;webpack&#39;).Compiler}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> compiler</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FileListPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">compiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /** compiler.hooks.&lt;hookName&gt;.tap/tapAsync/tapPromise(PluginName, cb) */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    compiler.hooks.compilation.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;FileListPlugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">compilation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">compilationParams</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // https://webpack.docschina.org/api/compilation-hooks/#processassets</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        compilation.hooks.processAssets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;FileListPlugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            stage: compiler.webpack.Compilation.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PROCESS_ASSETS_STAGE_SUMMARIZE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 整理现有 asset 列表</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">assets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> entriesAssets</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">entries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(assets)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(entriesAssets.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">filename</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">size</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                entriesAssets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(([</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">filename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">filename</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">size</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                compilation.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emitAsset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dist-info.md&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> compiler.webpack.sources.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RawSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(content))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    FileListPlugin</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,33),p=[l];function h(t,k,d,o,r,c){return a(),i("div",null,p)}const y=s(n,[["render",h]]);export{g as __pageData,y as default};
