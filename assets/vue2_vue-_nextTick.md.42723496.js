import{_ as s,o as a,c as n,a as e}from"./app.b90595f9.js";const C=JSON.parse('{"title":"vue的$nextTick","description":"","frontmatter":{},"headers":[{"level":2,"title":"$nextTick","slug":"nexttick","link":"#nexttick","children":[]},{"level":2,"title":"$nextTick 使用 setTimeout 存在的问题","slug":"nexttick-使用-settimeout-存在的问题","link":"#nexttick-使用-settimeout-存在的问题","children":[{"level":3,"title":"降级顺序","slug":"降级顺序","link":"#降级顺序","children":[]},{"level":3,"title":"Promise(微任务)","slug":"promise-微任务","link":"#promise-微任务","children":[]},{"level":3,"title":"MutationObserver (微任务)","slug":"mutationobserver-微任务","link":"#mutationobserver-微任务","children":[]},{"level":3,"title":"setImmediate (宏任务)","slug":"setimmediate-宏任务","link":"#setimmediate-宏任务","children":[]},{"level":3,"title":"MessageChannel","slug":"messagechannel","link":"#messagechannel","children":[]},{"level":3,"title":"setTimeout (宏任务)","slug":"settimeout-宏任务","link":"#settimeout-宏任务","children":[]}]},{"level":2,"title":"vue3的 $nextTick","slug":"vue3的-nexttick","link":"#vue3的-nexttick","children":[]}],"relativePath":"vue2/vue-$nextTick.md","lastUpdated":1716447218000}'),l={name:"vue2/vue-$nextTick.md"},o=e(`<h1 id="vue的-nexttick" tabindex="-1">vue的$nextTick <a class="header-anchor" href="#vue的-nexttick" aria-hidden="true">#</a></h1><ul><li><code>$nextTick</code> 参照文章</li><li><a href="https://segmentfault.com/a/1190000008589736" target="_blank" rel="noreferrer">Vue源码详解之nextTick：MutationObserver只是浮云，microtask才是核心！</a></li><li><a href="https://mp.weixin.qq.com/s/l9pGe7-xY08DeaFMnk0xuA" target="_blank" rel="noreferrer">ssh 深入解析 EventLoop 和浏览器渲染、帧动画、空闲回调的关系</a></li></ul><h2 id="nexttick" tabindex="-1">$nextTick <a class="header-anchor" href="#nexttick" aria-hidden="true">#</a></h2><ul><li><code>$nextTick</code> 的处理，在 <code>Vue</code> 中实际定义的叫 <code>timerFunc</code></li></ul><h2 id="nexttick-使用-settimeout-存在的问题" tabindex="-1">$nextTick 使用 setTimeout 存在的问题 <a class="header-anchor" href="#nexttick-使用-settimeout-存在的问题" aria-hidden="true">#</a></h2><blockquote><p>下面这两个例子，通过绑定 <code>Scroll</code> 事件，获取其 <code>scroll-top</code> ，实时去改变 <code>dom style</code>，通过下拉右边滚动条发现，通过 <code>setTimeout</code> 实现的 <code>$nextTick</code>，的那个方块会存在严重的抖动，而 <code>Promise</code> 实现的则没有这个问题</p></blockquote><p><a href="https://codepen.io/onezhangxiaoye/pen/poNYQVY" target="_blank" rel="noreferrer">$nextTick-promise实现-CodePen</a></p><p><a href="https://codepen.io/onezhangxiaoye/pen/GRNewQM" target="_blank" rel="noreferrer">$nextTick-setTimeout实现-CodePen</a></p><blockquote><ul><li>涉及到了 <code>宏任务 macro-task</code> 和 <code>微任务 micro-task</code>，在 <code>EventLoop</code> 中的执行顺序问题。</li><li>其实单从完成数据的更新来看，使用宏任务或者微任务是没有任何区别的，他们都能完成工作，但是在某些情况下，会出现数据更新的延迟：</li><li>比如上面的例子在 <code>Scroll</code> 事件中当用户下拉时，当第一次触发UI事件，<code>vue</code> 执行 <code>$nextTick</code> 会向 <code>task</code> 队列推入一个 <code>setTimeout</code> ，<strong>然后这个 <code>setTimeout</code> 任务必须要等到当前这个宏任务执行完成后才有机会执行，但是实际上在这个宏任务执行之前，浏览器已经执行了一次页面的重绘，重绘后页面内容整体上移，方块的位置也向上移动了，接下来才执行了 <code>setTimeout</code> 这个宏任务，这次宏任务所更新的方块位置依旧需要等到下次页面的重绘才会展示到页面上，所以方块渲染的位置和当前的预期的位置就出现了一定的误差，就出现了方块一直在抖动的问题。</strong></li><li>若实现方式为 <code>Promise</code> ，当第一次UI事件触发时，<code>vue</code> 执行 <code>$nextTick</code> 会向微任务队列推入一个 <code>promise</code> ，而这个微任务会在当前宏任务执行期间内执行完成，宏任务执行完成后页面重绘后方块的位置就是当前实际预期的位置，方块就会很稳定</li></ul></blockquote><h3 id="降级顺序" tabindex="-1">降级顺序 <a class="header-anchor" href="#降级顺序" aria-hidden="true">#</a></h3><blockquote><p><code>Promise</code> =&gt; <code>MutationObserver</code> =&gt; <code>setImmediate</code> =&gt; <code>setTimeout</code></p></blockquote><h3 id="promise-微任务" tabindex="-1">Promise(微任务) <a class="header-anchor" href="#promise-微任务" aria-hidden="true">#</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> p </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">timerFunc</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">flushCallbacks</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 省略部分</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><h3 id="mutationobserver-微任务" tabindex="-1">MutationObserver (微任务) <a class="header-anchor" href="#mutationobserver-微任务" aria-hidden="true">#</a></h3><blockquote><ul><li>提供了监视对DOM树所做更改的能力 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver" target="_blank" rel="noreferrer">MDN</a></li></ul></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> counter </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> observer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MutationObserver</span><span style="color:#A6ACCD;">(flushCallbacks)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> textNode </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createTextNode</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">String</span><span style="color:#A6ACCD;">(counter))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">observer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">observe</span><span style="color:#A6ACCD;">(textNode</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 设为 true 以监视指定目标节点或子节点树中节点所包含的字符数据的变化</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">characterData</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">timerFunc</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">counter</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">counter</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">%</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">textNode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">String</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">counter</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><h3 id="setimmediate-宏任务" tabindex="-1">setImmediate (宏任务) <a class="header-anchor" href="#setimmediate-宏任务" aria-hidden="true">#</a></h3><blockquote><ul><li><code>当前只有 IE 支持</code>， <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/setImmediate" target="_blank" rel="noreferrer">MDN</a>，该方法用来把一些需要长时间运行的操作放在一个回调函数里，在浏览器完成后面的其他语句后，就立刻执行这个回调函数。</li><li><code>Vue 注释</code> <strong>Fallback to setImmediate.Technically it leverages the (macro) task queue,but it is still a better choice than setTimeout.</strong></li></ul></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">timerFunc</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">setImmediate</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">flushCallbacks</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><h3 id="messagechannel" tabindex="-1">MessageChannel <a class="header-anchor" href="#messagechannel" aria-hidden="true">#</a></h3><blockquote><ul><li>以前 <code>vue</code> 版本存在，后面移除了</li></ul></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> channel </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MessageChannel</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> port </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> channel</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">port2</span></span>
<span class="line"><span style="color:#A6ACCD;">  channel</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">port1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">onmessage </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> flushCallbacks</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">macroTimerFunc</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">port</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">postMessage</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="settimeout-宏任务" tabindex="-1">setTimeout (宏任务) <a class="header-anchor" href="#settimeout-宏任务" aria-hidden="true">#</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">timerFunc</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">flushCallbacks</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><h2 id="vue3的-nexttick" tabindex="-1">vue3的 $nextTick <a class="header-anchor" href="#vue3的-nexttick" aria-hidden="true">#</a></h2><blockquote><ul><li><code>vue3</code> 的 <code>$nextTick</code> 直接使用 <code>Promise</code> 不进行降级处理了</li></ul></blockquote><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> resolvedPromise</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">nextTick</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">fn</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">p</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">currentFlushPromise</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">resolvedPromise</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fn</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">fn</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">p</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,27),p=[o];function t(c,r,i,y,F,D){return a(),n("div",null,p)}const d=s(l,[["render",t]]);export{C as __pageData,d as default};
