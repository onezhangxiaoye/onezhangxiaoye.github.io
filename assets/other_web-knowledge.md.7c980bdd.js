import{_ as e,o as l,c as o,a as s}from"./app.b90595f9.js";const f=JSON.parse('{"title":"前端知识点","description":"","frontmatter":{},"headers":[{"level":2,"title":"JavaScript 相关","slug":"javascript-相关","link":"#javascript-相关","children":[{"level":3,"title":"原始数据类型 + 引用数据类型","slug":"原始数据类型-引用数据类型","link":"#原始数据类型-引用数据类型","children":[]},{"level":3,"title":"0.1+0.2 !== 0.3","slug":"_0-1-0-2-0-3","link":"#_0-1-0-2-0-3","children":[]},{"level":3,"title":"Symbol","slug":"symbol","link":"#symbol","children":[]},{"level":3,"title":"Object.is 和 === 的区别","slug":"object-is-和-的区别","link":"#object-is-和-的区别","children":[]},{"level":3,"title":"JS 中，类型转换只有三种：转换成数字、布尔值、字符串","slug":"js-中-类型转换只有三种-转换成数字、布尔值、字符串","link":"#js-中-类型转换只有三种-转换成数字、布尔值、字符串","children":[]},{"level":3,"title":"== 和 === 的区别","slug":"和-的区别","link":"#和-的区别","children":[]},{"level":3,"title":"如何让 if(a == 1 && a == 2) 条件成立","slug":"如何让-if-a-1-a-2-条件成立","link":"#如何让-if-a-1-a-2-条件成立","children":[]},{"level":3,"title":"作用域（全局window、函数Function、块级let/const）、作用域链、执行上下文","slug":"作用域-全局window、函数function、块级let-const-、作用域链、执行上下文","link":"#作用域-全局window、函数function、块级let-const-、作用域链、执行上下文","children":[]},{"level":3,"title":"闭包","slug":"闭包","link":"#闭包","children":[]},{"level":3,"title":"内存泄漏","slug":"内存泄漏","link":"#内存泄漏","children":[]},{"level":3,"title":"垃圾回收","slug":"垃圾回收","link":"#垃圾回收","children":[]},{"level":3,"title":"原型/原型链","slug":"原型-原型链","link":"#原型-原型链","children":[]},{"level":3,"title":"继承","slug":"继承","link":"#继承","children":[]},{"level":3,"title":"arguments 转化成数组","slug":"arguments-转化成数组","link":"#arguments-转化成数组","children":[]},{"level":3,"title":"中断 forEach","slug":"中断-foreach","link":"#中断-foreach","children":[]},{"level":3,"title":"JS判断数组中是否包含某个值","slug":"js判断数组中是否包含某个值","link":"#js判断数组中是否包含某个值","children":[]},{"level":3,"title":"数组扁平化","slug":"数组扁平化","link":"#数组扁平化","children":[]},{"level":3,"title":"高阶函数","slug":"高阶函数","link":"#高阶函数","children":[]},{"level":3,"title":"this","slug":"this","link":"#this","children":[]},{"level":3,"title":"深、浅拷贝","slug":"深、浅拷贝","link":"#深、浅拷贝","children":[]},{"level":3,"title":"EventLoop","slug":"eventloop","link":"#eventloop","children":[]},{"level":3,"title":"ES6 新增了哪些内容","slug":"es6-新增了哪些内容","link":"#es6-新增了哪些内容","children":[]}]},{"level":2,"title":"CSS 相关","slug":"css-相关","link":"#css-相关","children":[{"level":3,"title":"CSS 选择器的权重和优先级","slug":"css-选择器的权重和优先级","link":"#css-选择器的权重和优先级","children":[]},{"level":3,"title":"BFC","slug":"bfc","link":"#bfc","children":[]},{"level":3,"title":"盒子模型","slug":"盒子模型","link":"#盒子模型","children":[]},{"level":3,"title":"清除浮动","slug":"清除浮动","link":"#清除浮动","children":[]},{"level":3,"title":":first-child() :first-of-type","slug":"first-child-first-of-type","link":"#first-child-first-of-type","children":[]},{"level":3,"title":"处理水平垂直居中","slug":"处理水平垂直居中","link":"#处理水平垂直居中","children":[]}]},{"level":2,"title":"Vue 相关","slug":"vue-相关","link":"#vue-相关","children":[{"level":3,"title":"vue3 相对于 vue2 的变化 官网","slug":"vue3-相对于-vue2-的变化-官网","link":"#vue3-相对于-vue2-的变化-官网","children":[]}]},{"level":2,"title":"浏览器相关及其他","slug":"浏览器相关及其他","link":"#浏览器相关及其他","children":[{"level":3,"title":"浏览器缓存","slug":"浏览器缓存","link":"#浏览器缓存","children":[]},{"level":3,"title":"cookies","slug":"cookies","link":"#cookies","children":[]},{"level":3,"title":"从输入URL到页面呈现发生了什么 (网络相关/解析算法/渲染过程)","slug":"从输入url到页面呈现发生了什么-网络相关-解析算法-渲染过程","link":"#从输入url到页面呈现发生了什么-网络相关-解析算法-渲染过程","children":[{"level":4,"title":"网络请求","slug":"网络请求","link":"#网络请求","children":[]},{"level":4,"title":"解析","slug":"解析","link":"#解析","children":[]},{"level":4,"title":"渲染","slug":"渲染","link":"#渲染","children":[]}]},{"level":3,"title":"回流和重绘","slug":"回流和重绘","link":"#回流和重绘","children":[]},{"level":3,"title":"XSS攻击、CSRF攻击","slug":"xss攻击、csrf攻击","link":"#xss攻击、csrf攻击","children":[]},{"level":3,"title":"HTTPS & HTTP","slug":"https-http","link":"#https-http","children":[]},{"level":3,"title":"图片懒加载","slug":"图片懒加载","link":"#图片懒加载","children":[]},{"level":3,"title":"TCP 和 UDP","slug":"tcp-和-udp","link":"#tcp-和-udp","children":[]},{"level":3,"title":"TCP 三次握手 / 四次挥手","slug":"tcp-三次握手-四次挥手","link":"#tcp-三次握手-四次挥手","children":[{"level":4,"title":"三次握手","slug":"三次握手","link":"#三次握手","children":[]},{"level":4,"title":"四次挥手","slug":"四次挥手","link":"#四次挥手","children":[]}]},{"level":3,"title":"前端跨域问题","slug":"前端跨域问题","link":"#前端跨域问题","children":[]}]},{"level":2,"title":"webpack","slug":"webpack","link":"#webpack","children":[]},{"level":2,"title":"算法基础","slug":"算法基础","link":"#算法基础","children":[]},{"level":2,"title":"数据结构","slug":"数据结构","link":"#数据结构","children":[]},{"level":2,"title":"设计模式","slug":"设计模式","link":"#设计模式","children":[]}],"relativePath":"other/web-knowledge.md","lastUpdated":1716447218000}'),a={name:"other/web-knowledge.md"},c=s(`<h1 id="前端知识点" tabindex="-1">前端知识点 <a class="header-anchor" href="#前端知识点" aria-hidden="true">#</a></h1><h2 id="javascript-相关" tabindex="-1">JavaScript 相关 <a class="header-anchor" href="#javascript-相关" aria-hidden="true">#</a></h2><nav class="table-of-contents"><ul><li><a href="#javascript-相关">JavaScript 相关</a><ul><li><a href="#原始数据类型-引用数据类型">原始数据类型 + 引用数据类型</a></li><li><a href="#_0-1-0-2-0-3">0.1+0.2 !== 0.3</a></li><li><a href="#symbol">Symbol</a></li><li><a href="#object-is-和-的区别">Object.is 和 === 的区别</a></li><li><a href="#js-中-类型转换只有三种-转换成数字、布尔值、字符串">JS 中，类型转换只有三种：转换成数字、布尔值、字符串</a></li><li><a href="#和-的区别">== 和 === 的区别</a></li><li><a href="#如何让-if-a-1-a-2-条件成立">如何让 if(a == 1 &amp;&amp; a == 2) 条件成立</a></li><li><a href="#作用域-全局window、函数function、块级let-const-、作用域链、执行上下文">作用域（全局window、函数Function、块级let/const）、作用域链、执行上下文</a></li><li><a href="#闭包">闭包</a></li><li><a href="#内存泄漏">内存泄漏</a></li><li><a href="#垃圾回收">垃圾回收</a></li><li><a href="#原型-原型链">原型/原型链</a></li><li><a href="#继承">继承</a></li><li><a href="#arguments-转化成数组">arguments 转化成数组</a></li><li><a href="#中断-foreach">中断 forEach</a></li><li><a href="#js判断数组中是否包含某个值">JS判断数组中是否包含某个值</a></li><li><a href="#数组扁平化">数组扁平化</a></li><li><a href="#高阶函数">高阶函数</a></li><li><a href="#this">this</a></li><li><a href="#深、浅拷贝">深、浅拷贝</a></li><li><a href="#eventloop">EventLoop</a></li><li><a href="#es6-新增了哪些内容">ES6 新增了哪些内容</a></li></ul></li><li><a href="#css-相关">CSS 相关</a><ul><li><a href="#css-选择器的权重和优先级">CSS 选择器的权重和优先级</a></li><li><a href="#bfc">BFC</a></li><li><a href="#盒子模型">盒子模型</a></li><li><a href="#清除浮动">清除浮动</a></li><li><a href="#first-child-first-of-type">:first-child() :first-of-type</a></li><li><a href="#处理水平垂直居中">处理水平垂直居中</a></li></ul></li><li><a href="#vue-相关">Vue 相关</a><ul><li><a href="#vue3-相对于-vue2-的变化-官网">vue3 相对于 vue2 的变化 官网</a></li></ul></li><li><a href="#浏览器相关及其他">浏览器相关及其他</a><ul><li><a href="#浏览器缓存">浏览器缓存</a></li><li><a href="#cookies">cookies</a></li><li><a href="#从输入url到页面呈现发生了什么-网络相关-解析算法-渲染过程">从输入URL到页面呈现发生了什么 (网络相关/解析算法/渲染过程)</a></li><li><a href="#回流和重绘">回流和重绘</a></li><li><a href="#xss攻击、csrf攻击">XSS攻击、CSRF攻击</a></li><li><a href="#https-http">HTTPS &amp; HTTP</a></li><li><a href="#图片懒加载">图片懒加载</a></li><li><a href="#tcp-和-udp">TCP 和 UDP</a></li><li><a href="#tcp-三次握手-四次挥手">TCP 三次握手 / 四次挥手</a></li><li><a href="#前端跨域问题">前端跨域问题</a></li></ul></li><li><a href="#webpack">webpack</a></li><li><a href="#算法基础">算法基础</a></li><li><a href="#数据结构">数据结构</a></li><li><a href="#设计模式">设计模式</a></li></ul></nav><h3 id="原始数据类型-引用数据类型" tabindex="-1">原始数据类型 + 引用数据类型 <a class="header-anchor" href="#原始数据类型-引用数据类型" aria-hidden="true">#</a></h3><p><code>js</code> 的数据类型分为 <code>原始数据类型</code> 和 <code>引用数据类型</code>，原始数据类型存在栈中，引用数据类型存在堆中。</p><ul><li>原始数据类型包含：<code>undefined</code> <code>number</code> <code>string</code> <code>boolean</code> <code>null</code> 以及 es6 新增的 <code>symbol</code> <code>bigint</code></li><li>引用数据类型主要是：<code>Object</code> <code>Array</code> <code>Function</code> 等这些对象</li></ul><blockquote><ol><li>在原始数据类型中：<code>null</code> 需要注意一下，只有 <code>typeof null === &#39;object&#39;</code> 是这样的结果</li><li>在引用数据类型中：除了 <code>typeof Function === &#39;function&#39;</code> 之外其他的都是 <code>object</code></li></ol></blockquote><p>通常我们使用 <code>typeof</code> 检查原始数据类型，用 <code>instanceof</code> 检查对象，用 <code>Array.isArray</code> 检查数组，检查原生 js 对象还可以使用 <code>Object.prototype.toString.call([]) === &#39;[object Array]&#39;</code></p><h3 id="_0-1-0-2-0-3" tabindex="-1">0.1+0.2 !== 0.3 <a class="header-anchor" href="#_0-1-0-2-0-3" aria-hidden="true">#</a></h3><p><a href="https://juejin.cn/post/7061588533214969892#heading-31" target="_blank" rel="noreferrer">链接</a><code>JavaScript</code> 使用 <code>Number</code> 类型表示数字（整数和浮点数），遵循 <a href="https://zh.wikipedia.org/wiki/IEEE_754" target="_blank" rel="noreferrer">IEEE 754 标准</a> 通过 <code>64位</code> 来表示一个数字，在计算时会先把 0.1 和 0.2 转换为 2进制 然后再进行加法运算，转换后的 2进制 数据都是无限循环的，但是实际上只能保存 52位长度的有效二进制数，截断的那一部分就造成了精度的损失</p><h3 id="symbol" tabindex="-1">Symbol <a class="header-anchor" href="#symbol" aria-hidden="true">#</a></h3><p><code>Symbol</code> 是 es6 新增的一个原始数据类型，主要用来创建唯一的标识符，实际应用如 <code>instanceof</code> 操作时：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyClass</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  [Symbol</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hasInstance]</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">foo</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">foo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">instanceof</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyClass</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre></div><h3 id="object-is-和-的区别" tabindex="-1"><code>Object.is</code> 和 <code>===</code> 的区别 <a class="header-anchor" href="#object-is-和-的区别" aria-hidden="true">#</a></h3><p>判断值相等的不同方法</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">  Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">is</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">NaN,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NaN</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#A6ACCD;">  Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">is</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">NaN</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NaN</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//false</span></span>
<span class="line"></span></code></pre></div><h3 id="js-中-类型转换只有三种-转换成数字、布尔值、字符串" tabindex="-1">JS 中，类型转换只有三种：转换成数字、布尔值、字符串 <a class="header-anchor" href="#js-中-类型转换只有三种-转换成数字、布尔值、字符串" aria-hidden="true">#</a></h3><h3 id="和-的区别" tabindex="-1"><code>==</code> 和 <code>===</code> 的区别 <a class="header-anchor" href="#和-的区别" aria-hidden="true">#</a></h3><p><code>==</code> 会进行 <code>强制类型转换</code>，比如 <code>null == undefined</code>，<code>1 == ‘1’</code> 都为 <code>true</code>，而 <code>===</code> 只有两个操作数在不转换的前提下相等才返回 <code>true</code></p><p><strong>类型转换规则如下：</strong><br></p><ul><li>如果任一操作数是布尔值，则将其转换为数值再比较是否相等。false 转换为0，true 转换为1。</li><li>如果一个操作数是字符串，另一个操作数是数值，则尝试将字符串转换为数值，再比较是否相等。</li><li>如果一个操作数是对象，另一个操作数不是，则调用对象的 valueOf()方法取得其原始值，再根据前面的规则进行比较。 在进行比较时，这两个操作符会遵循如下规则。</li><li>null 和undefined 相等。</li><li>null 和undefined 不能转换为其他类型的值再进行比较。</li><li>如果有任一操作数是NaN，则相等操作符返回false，不相等操作符返回true。记住：即使两个操作数都是NaN，相等操作符也返回false，因为按照规则，NaN 不等于NaN。</li><li>如果两个操作数都是对象，则比较它们是不是同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回true。否则，两者不相等。</li></ul><h3 id="如何让-if-a-1-a-2-条件成立" tabindex="-1">如何让 <code>if(a == 1 &amp;&amp; a == 2)</code> 条件成立 <a class="header-anchor" href="#如何让-if-a-1-a-2-条件成立" aria-hidden="true">#</a></h3><p>利用强制类型转换在对象的类型转换会调用对象的 <code>valueOf</code> 这一特性</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">valueOf</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">num</span><span style="color:#89DDFF;">++</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> a) </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre></div><h3 id="作用域-全局window、函数function、块级let-const-、作用域链、执行上下文" tabindex="-1">作用域（全局window、函数Function、块级let/const）、作用域链、执行上下文 <a class="header-anchor" href="#作用域-全局window、函数function、块级let-const-、作用域链、执行上下文" aria-hidden="true">#</a></h3><ul><li><strong>执行上下文：</strong> 指的是当前执行环境中的<code>变量</code>、<code>函数声明</code>、<code>参数</code>、<code>作用域链</code>、<code>this</code>等信息。分为<code>全局执行上下文</code>和<code>函数执行上下文</code>，区别在于全局执行上下文只会存在一个、网页关闭时销毁，函数执行上下文会在每次函数执行时创建、函数执行完后销毁。代码的执行的执行上下文创建时以 <code>栈(先入后出)</code> 的方式进行的，当前执行的始终是栈顶端的代码</li><li><strong>作用域：</strong> 简单来说就是变量，对象，函数在代码执行过程中可被访问的权限，在浏览器环境中分为，<code>全局作用域 window</code>、<code>函数作用域</code>、<code>块级作用域 let/const</code></li><li><strong>作用域链：</strong> 作用域中访问某个变量时，会首先在当前作用域中查找，若没有，再去它的下级作用域查找，直至找到全局作用，若没有则会报错 <code>Uncaught ReferenceError: a is not defined</code>；执行上下文中的代码在执行的时候，会创建变量对象的 <code>作用域链</code></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let#%E6%9A%82%E6%97%B6%E6%80%A7%E6%AD%BB%E5%8C%BA" target="_blank" rel="noreferrer"><strong>暂时性死区</strong></a> 从一个代码块的开始直到代码执行到声明变量的行之前，let 或 const 声明的变量都处于“暂时性死区”，在这期间访问变量将抛出 <code>ReferenceError</code></li></ul><h3 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-hidden="true">#</a></h3><p><strong>闭包</strong> 是指那些引用了另一个函数作用域中变量的函数，通常在 <strong>嵌套函数</strong> 中实现；当执行上下文中的代码执行时，内部函数的作用域链会保存当前上下文的作用域链，此作用域链需要等到闭包函数执行完后才会被销毁</p><h3 id="内存泄漏" tabindex="-1">内存泄漏 <a class="header-anchor" href="#内存泄漏" aria-hidden="true">#</a></h3><p><strong>内存泄漏</strong> 说的是那些声明的变量在将来不会被使用但是又无法被垃圾回收机制回收的那部分内存</p><blockquote><p>最常见的如声明了一个全局变量，若这个变量只会使用一次，这意味着在未来他都不会被垃圾回收机制所回收</p></blockquote><h3 id="垃圾回收" tabindex="-1">垃圾回收 <a class="header-anchor" href="#垃圾回收" aria-hidden="true">#</a></h3><ul><li><code>标记清除</code>：当变量进入上下文，这个变量就会被加上存在于上下文的标记，离开上下文就会被加上离开的标记，然后等待垃圾回收机制的回收</li><li><code>引用清除</code>：当变量赋值给一个引用指时它的引用数+1，反之则-1；当遇到循环引用时有可能其引用数永远都不会变为0，这时就很容易造成内存泄漏</li></ul><h3 id="原型-原型链" tabindex="-1">原型/原型链 <a class="header-anchor" href="#原型-原型链" aria-hidden="true">#</a></h3><p><strong>原型</strong> 每个函数都有一个属性 <code>prototype</code> ， <code>prototype</code> 有个属性 <code>constructor</code> 指向函数本身，通过函数实例化的对象有个属性 <code>__proto__</code> 指向函数的 <code>prototype</code>，所以有如下关系</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Func</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">Func </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Func</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">constructor </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Func</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__  </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Func</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre></div><p>所以说 <code>Func.prototype</code> 就是 <code>a</code> 的原型 <br><strong>原型链</strong> 当我们访问对象上的属性时，会首先在当前对象上查找，若没找到，就再去其原型上找，直至找到 <code>Object</code> 的原型，最后 <code>Object.prototype.__proto__ === null</code> 这样的查找路径就是原型链；或者说，每个对象都有一个属性 <code>__proto__</code> 指向它构造函数的 <code>prototype</code>，而这个构造函数的 <code>prototype</code> 的 <code>__proto__</code> 又指向了创建 <code>prototype对象</code> 的构造函数，这样的一条引用路径就形成了原型链</p><h3 id="继承" tabindex="-1">继承 <a class="header-anchor" href="#继承" aria-hidden="true">#</a></h3><ul><li>原型链继承</li><li>盗用构造函数</li><li>组合继承</li><li>寄生继承</li></ul><h3 id="arguments-转化成数组" tabindex="-1"><code>arguments</code> 转化成数组 <a class="header-anchor" href="#arguments-转化成数组" aria-hidden="true">#</a></h3><p><code>arguments</code> 是类数据结构，但不是数组，可以用如下方法转换为数组，但是 <code>es6</code> 后更加推荐使用剩余参数表示</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#A6ACCD;">(arguments) </span><span style="color:#676E95;font-style:italic;">// es6</span></span>
<span class="line"><span style="color:#A6ACCD;">[</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">arguments] </span><span style="color:#676E95;font-style:italic;">// es6</span></span>
<span class="line"><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">slice</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">(arguments</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// es5</span></span>
<span class="line"></span></code></pre></div><h3 id="中断-foreach" tabindex="-1">中断 <code>forEach</code> <a class="header-anchor" href="#中断-foreach" aria-hidden="true">#</a></h3><h3 id="js判断数组中是否包含某个值" tabindex="-1">JS判断数组中是否包含某个值 <a class="header-anchor" href="#js判断数组中是否包含某个值" aria-hidden="true">#</a></h3><h3 id="数组扁平化" tabindex="-1">数组扁平化 <a class="header-anchor" href="#数组扁平化" aria-hidden="true">#</a></h3><p><code>es6</code> 中提供了原生的数组扁平化函数 <code>flat</code> ，<code>flat</code> 传入一个 <code>number</code>（<code>扁平化深度</code>，<code>Infinity</code> 完全展开）</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">array</span><span style="color:#676E95;font-style:italic;"> {[]}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">depth</span><span style="color:#676E95;font-style:italic;"> {number}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">flat</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">array</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">depth</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nextDepth</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">depth</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">Infinity</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">Infinity</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">depth</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">item</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">of</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">array</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">depth</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isArray</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">item</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">...</span><span style="color:#82AAFF;">flat</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nextDepth</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">item</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="高阶函数" tabindex="-1">高阶函数 <a class="header-anchor" href="#高阶函数" aria-hidden="true">#</a></h3><p>使用函数生成新的函数，比如 防抖、节流</p><ul><li><code>防抖</code>：第一次调用函数后，函数会在定义的延迟后执行，若在时间内重新调用，延迟时间会刷新</li><li><code>节流</code>：函数在定义时间内即使多次触发也只会执行一次</li></ul><h3 id="this" tabindex="-1">this <a class="header-anchor" href="#this" aria-hidden="true">#</a></h3><ul><li>标准函数中，this 的指向取决于函数的调用方式，标准函数的 this 可以用 bind 固定</li><li>箭头函数中，this 的指向取决于它的外部环境</li></ul><h3 id="深、浅拷贝" tabindex="-1">深、浅拷贝 <a class="header-anchor" href="#深、浅拷贝" aria-hidden="true">#</a></h3><h3 id="eventloop" tabindex="-1"><code>EventLoop</code> <a class="header-anchor" href="#eventloop" aria-hidden="true">#</a></h3><ol><li><code>宏任务(MacroTask)</code>：渲染事件、交互事件、js脚本执行、网络请求、文件读写完成事件等等</li><li><code>微任务(MicroTask)</code>：MutationObserver、Promise.then(或.reject) 以及以 Promise 为基础开发的其他技术(比如fetch API), 还包括 V8 的垃圾回收过程</li></ol><h3 id="es6-新增了哪些内容" tabindex="-1"><code>ES6</code> 新增了哪些内容 <a class="header-anchor" href="#es6-新增了哪些内容" aria-hidden="true">#</a></h3><ol><li><code>let</code>,const,</li><li>解构赋值</li><li>模板字符串,字符串 <code>includes()</code>、<code>startsWith()</code>、<code>endsWith()</code></li><li><code>Number.isFinite()</code>、<code>Number.isNaN()</code>、<code>Number.isInteger()</code>、<code>Number.trunc()</code>、<code>和Number.sign()</code></li><li>函数参数的默认值、rest 参数、箭头函数</li><li><strong>数组</strong>：<code>Array.from()</code>、<code>Array.of()</code>、<code>find()</code>、<code>findIndex()</code>、<code>fill()</code>、<code>entries()</code>、<code>keys()</code>、<code>values()</code>、<code>includes()</code>、<code>flat()</code>、<code>flatMap()</code></li><li><strong>对象</strong>： 属性的简洁表示法 <code>const foo = &#39;bar&#39;;const baz = {foo};</code>、属性名表达式 <code>obj[&#39;a&#39; + &#39;bc&#39;] = 123;</code>、<code>for...in</code>、<code>Object.keys(obj)</code>、<code>super 关键字</code>、<code>Object.is()</code>、<code>Object.assign()</code>、<code>Object.keys()</code>、<code>Object.values()</code>、<code>Object.entries()</code></li><li><code>Symbol</code></li><li><code>Set</code>、<code>WeakSet</code>、<code>Map</code>、<code>WeakMap</code></li></ol><blockquote><p>WeakSet WeakMap 键和值都是弱引用，内部的对象不进行引用计数 当他两内的对象 引用计数 为0时，在未来的时间随时会被垃圾回收机制回收 在 Vue3 中的 tartgetMap 使用了 WeakMap ，在进行渲染时，通过数据的 get ，渲染依赖收集器收集到了目标对象，但是未来当此对象被用户替换且不在其他地方使用此对象，若 tartgetMap 依旧引用此对象将会照成内存泄漏，但是使用 WeakMap 就不会有这个顾虑</p></blockquote><ol start="10"><li><code>Proxy</code></li><li><code>Reflect</code></li><li><code>Promise</code></li><li><code>for...of</code></li><li><code>Generator</code></li><li><code>async/await</code> <strong>ES2017</strong></li><li><code>Class</code></li><li><code>Module 语法</code></li></ol><h2 id="css-相关" tabindex="-1">CSS 相关 <a class="header-anchor" href="#css-相关" aria-hidden="true">#</a></h2><h3 id="css-选择器的权重和优先级" tabindex="-1">CSS 选择器的权重和优先级 <a class="header-anchor" href="#css-选择器的权重和优先级" aria-hidden="true">#</a></h3><ol><li><code>important!</code> 权总达到最大</li><li>内联样式，如: <code>style=&quot;...&quot;</code>，权值为 <code>1000</code></li><li>ID选择器，如：<code>#id</code>，权值为 <code>0100</code></li><li>类，伪类、属性选择器，如 <code>.class</code>，权值为 <code>0010</code></li><li>类型选择器、伪元素选择器，如 <code>div</code>，权值为 <code>0001</code></li><li>通配符、子选择器、相邻选择器等。如 <code>* &gt; +</code>，权值为 <code>0000</code></li><li>继承的样式没有权值</li></ol><h3 id="bfc" tabindex="-1">BFC <a class="header-anchor" href="#bfc" aria-hidden="true">#</a></h3><p><code>BFC</code> 就是 <strong>块级格式化上下文（Block Formatting Context）</strong>，他可以通过以下方式创建</p><ul><li>根元素（<code>&lt;html&gt;</code>）</li><li>浮动元素（元素的 float 不是 none）</li><li>绝对定位元素（元素的 position 为 absolute 或 fixed）</li><li>overflow 计算值不为 visible 的块元素</li></ul><p>为 BFC 的盒子有以下特性：</p><ul><li>计算 BFC 的高度时，需要计算浮动元素的高度</li><li>BFC 区域不会与浮动的容器发生重叠</li><li>BFC 是独立的容器，容器内部元素不会影响外部元素</li></ul><h3 id="盒子模型" tabindex="-1">盒子模型 <a class="header-anchor" href="#盒子模型" aria-hidden="true">#</a></h3><p>CSS 中有两种盒子模型，<code>标准盒子模型</code> 和 <code>IE 盒子模型</code>，标准盒子尺寸计算 <code>content</code>; IE 盒子 <code>content + padding + border</code> ，两种盒子可以通过 <code>box-sizing</code> 改变 <code>content-box</code> 和 <code>border-box</code></p><h3 id="清除浮动" tabindex="-1">清除浮动 <a class="header-anchor" href="#清除浮动" aria-hidden="true">#</a></h3><h3 id="first-child-first-of-type" tabindex="-1">:first-child() :first-of-type <a class="header-anchor" href="#first-child-first-of-type" aria-hidden="true">#</a></h3><h3 id="处理水平垂直居中" tabindex="-1">处理水平垂直居中 <a class="header-anchor" href="#处理水平垂直居中" aria-hidden="true">#</a></h3><p><code>CSS3</code> 最简单的就是使用 <code>Flex</code> 进行居中，它对父元素和子元素是否有固定宽高都没有要求，或者使用 <code>绝对定位+transform</code> ，水平居中当子元素 <code>display: block;</code> 且设置了固定宽度，也可以使用 <code>margin: 0 auto;</code> 进行居中</p><h2 id="vue-相关" tabindex="-1">Vue 相关 <a class="header-anchor" href="#vue-相关" aria-hidden="true">#</a></h2><ul><li><code>Vue</code> 响应式原理</li><li><code>v-if</code> <code>v-show</code> 区别</li><li><code>Vue diff</code> 算法</li><li>组件通信</li><li><code>render</code> 函数</li><li>生命周期</li><li><code>mixins</code></li><li><code>$nextTick</code></li><li>事件修饰符</li><li>生命周期</li><li><code>v-for key</code> 相关</li><li><code>vue</code> 路由钩子(全局/组件内)</li><li><a href="https://mp.weixin.qq.com/s?__biz=MzI3NTM5NDgzOA==&amp;mid=2247484143&amp;idx=1&amp;sn=049c69d8f79141fdf6404256c01e836f&amp;chksm=eb043a96dc73b380aeb6e694a5a535c93d5be09deffb5dfec988a28725b29a53af24ba625c5a&amp;mpshare=1&amp;scene=24&amp;srcid=0604CtlB4IugAXQuF4awPTtz&amp;sharer_sharetime=1591245594313&amp;sharer_shareid=8595fa68749b63bbe46362081ab0a4ad#rd" target="_blank" rel="noreferrer"><code>FLIP</code></a></li></ul><h3 id="vue3-相对于-vue2-的变化-官网" tabindex="-1">vue3 相对于 vue2 的变化 <a href="https://v3-migration.vuejs.org/zh/" target="_blank" rel="noreferrer">官网</a> <a class="header-anchor" href="#vue3-相对于-vue2-的变化-官网" aria-hidden="true">#</a></h3><ul><li>v3 响应式基于 <code>proxy</code>；v2 基于 <code>Object.defineProperty</code></li><li>v3 新增的组合式 <code>API</code></li><li><code>Teleport</code> 组件，自定义渲染位置，对弹窗类的组件特别友好</li><li><code>fragments</code> 片段，多根节点</li><li><code>v-model</code> 用于组件时的 <code>prop</code> 和默认事件名称调整 <code>value -&gt; modelValue</code> ；<code>input -&gt; update:modelValue</code>，<code>.sync</code> 事件修饰符已被移除；可使用多个 <code>v-model</code> ；自定义 <code>v-model</code> 修饰符</li><li><code>key</code> 使用的改变</li><li><code>v-if</code> <code>v-for</code> 在同一标签使用优先级的改变；v2 <code>v-for</code> 优先级大于 <code>v-if</code> ； 由于 v3 的 <code>v-if</code> 优先级大于 <code>v-for</code>，所以 <code>v-if</code> 无法访问 <code>v-for</code> 作用域内的变量别名</li><li><code>v-bind</code> 合并行为，v2 独立 <code>attr</code> 总会覆盖 <code>v-bind</code> 中的对象；v3 取决于定义的顺序</li><li><code>v-on.native</code> 移除，v2 使用 <code>.native</code> 绑定原生事件；v3 组件内需要使用 <code>emit</code> 定义会被触发的事件，未定义的都将会被设置到元素上，除非设置了 <code>inheritAttrs</code></li><li>函数式组件 v2 使用 <code>functional</code>；v3 直接使用函数进行定义</li><li>异步组件</li><li>新增 <code>emits</code> 选项</li><li>渲染函数 <code>API</code> ；v2 <code>render: h =&gt; h()</code> ；v3 全局导入的 <code>h</code> ；v3 <code>VNode props</code> 扁平化；<code>resolveComponent</code></li><li>插槽统一 ：v3 <code>this.$slots</code> 将插槽作为函数公开，移除 v2 中的 <code>this.$scopeSlots</code></li><li>v3 移除<code> $listeners</code> ，事件监听器现在是 <code>$attrs</code> 的一部分</li><li>v3 <code>$attrs</code> 包含所有传递给组件的 <code>attribute</code> ，包括 <code>class</code> <code>style</code></li><li>自定义标签的互操作性</li><li>按键修饰符：v3 不再支持数字(键码) 作为 <code>v-on</code> 的修饰符；不在支持 <code>config.keyCodes</code></li><li><code>事件 API</code>：v3 中 <code>$on</code> <code>$off</code> <code>$once</code> 实例方法已被移除，组件实例不在实现事件触发接口</li><li>v3 移除过滤器</li><li>v3 移除内联模板</li><li>v3 移除组件实例属性 <code>$children</code></li><li>v3 移除 <code>propsData</code></li><li><code>Attribute</code> 强制行为调整</li><li>自定义指令 钩子变化</li><li><code>Data 选项</code>：v3 中只接受返回 <code>object</code> 的 <code>function</code> ；<code>mixin</code> 合并策略现在是浅层的合并</li><li>v3 挂载的应用不会替换目标元素</li><li>v3 <code>props</code> 默认工厂函数不再能访问 <code>this</code></li><li>v3 组件 <code>Transition</code> 的 <code>class</code> 名更改</li><li>v3 当使用 <code>&lt;transition&gt;</code> 作为根结点的组件从外部被切换时将不再触发过渡效果</li><li><code>&lt;transition-group&gt;</code> 不再默认渲染根元素，但仍然可以用 <code>tag attribute</code> 创建根元素</li><li><code>VNode</code> 生命周期事件 v2：<code>@hook:update</code> ；v3: <code>@vue:update</code></li><li>侦听数组：v3 监听数组，只有在数组被替换时才会触发回调，可以添加 <code>deep</code> 处理这种情况</li></ul><h2 id="浏览器相关及其他" tabindex="-1">浏览器相关及其他 <a class="header-anchor" href="#浏览器相关及其他" aria-hidden="true">#</a></h2><h3 id="浏览器缓存" tabindex="-1">浏览器缓存 <a class="header-anchor" href="#浏览器缓存" aria-hidden="true">#</a></h3><p>当页面加载过一次后，为了降低服务器压力、加快下一次网页的加载速度，浏览器会主动缓存部分资源，主要是静态资源，如：js、css、图片等；<br> 浏览器缓存主要分为 <code>强缓存</code> 和 <code>协商缓存</code>，强缓存又分为 :</p><ul><li><code>disk catch</code> 缓存在磁盘中，浏览器关闭，依旧会存在</li><li><code>memory catch</code> 缓存在内存中，窗口或者浏览器关闭即会被销毁</li></ul><p>当浏览器刷新（刷新按钮或者F5）后加载资源时，会去查看本地是否又缓存，若有即检查缓存是否过期，<strong>通过catch-control的max-age秒和date(缓存有效期的起始计算时间)计算缓存到期时间和本地时间进行比较</strong>，若未过期直接返回 <code>200</code> 资源从本地加载，若过期则前往服务器进行协商缓存验证。请求中携带的 <code>Modify-Since</code> <strong>（上一次响应头中的 If-Modify-Since 文件最后的修改时间）</strong> 和 <code>If-no-match</code> <code>（ 上一次响应头中的 Etag 通过文件内容生成的 hash ）</code> ，首先验证 <code>If-no-match</code> 和服务器资源计算出来的 <code>hash</code> 进行比较，若一致在比较 <code>If-last-modify</code> ，若都没变化则返回 <code>304</code> ，并把当前的 <code>Etag</code> <code>last-modify</code> 放在响应头一并返回；若有修改则返回新的资源，并把当前的 <code>Etag</code> <code>last-modify</code> 放在响应头一并返回，响应值 <code>200</code>。</p><blockquote><p><code>nginx</code> 服务器的 <code>Etag</code> 计算会结合 <code>last-modify</code> 和 <code>content</code> 一起计算，所以即使文件内容没有修改，但是最后修改时间变了 <code>Etag</code> 还是会改变；一般场景基本上使用 <code>last-modify</code> 依旧足够了，但是存在在较短时间内多次该该文件，由于服务器时间精度问题，可能有文件修改了但是 <code>last-modify</code> 没有变化的情况，所以有了 <code>Etag</code>，但是它需要在每次请求去计算，这也相当于增加了服务器的负担</p></blockquote><h3 id="cookies" tabindex="-1">cookies <a class="header-anchor" href="#cookies" aria-hidden="true">#</a></h3><p><a href="https://juejin.cn/post/6844904100035821575#heading-44" target="_blank" rel="noreferrer">http 灵魂之问</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies" target="_blank" rel="noreferrer">MDN-cookies</a></p><p><code>Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly;SameSite=Strict;Path=/docs;Domain=mozilla.org;</code></p><ul><li><code>Expires</code>： 过期时间</li><li><code>Secure</code>： 标记为 <code>Secure</code> 的 <code>Cookie</code> 只应通过被 <code>HTTPS</code> 协议加密过的请求发送给服务端</li><li><code>HttpOnly</code> <code>JavaScript</code> <code>Document.cookie API</code> 无法访问带有 <code>HttpOnly</code> 属性的 <code>cookie</code>；此类 <code>Cookie</code> 仅作用于服务器。例如，持久化服务器端会话的 <code>Cookie</code> 不需要对 JavaScript 可用，而应具有 HttpOnly 属性。此预防措施有助于缓解<code>跨站点脚本（XSS）攻击</code></li><li><code>Domain</code>：</li><li><code>Path</code>：</li><li><code>SameSite</code>： <code>SameSite</code> <code>Cookie</code> 允许服务器要求某个 <code>cookie</code> 在跨站请求时不会被发送，（其中 Site 由可注册域定义），从而可以阻止<code>跨站请求伪造攻击（CSRF）</code><ul><li><strong>None</strong>。浏览器会在同站请求、跨站请求下继续发送 <code>cookies</code>，不区分大小写。</li><li><strong>Strict</strong>。浏览器将只在访问相同站点时发送 <code>cookie</code>。（在原有 <code>Cookies</code> 的限制条件上的加强，如上文 “<code>Cookie 的作用域</code>” 所述）</li><li><strong>Lax</strong>。与 <code>Strict</code> 类似，但用户从外部站点导航至URL时（例如通过链接）除外。 在新版本浏览器中，为默认选项，<code>Same-site cookies</code> 将会为一些跨站子请求保留，如图片加载或者 <code>frames</code> 的调用，但只有当用户从外部站点导航到URL时才会发送。如 link 链接</li></ul></li></ul><h3 id="从输入url到页面呈现发生了什么-网络相关-解析算法-渲染过程" tabindex="-1">从输入<code>URL</code>到页面呈现发生了什么 (网络相关/解析算法/渲染过程) <a class="header-anchor" href="#从输入url到页面呈现发生了什么-网络相关-解析算法-渲染过程" aria-hidden="true">#</a></h3><p><a href="https://juejin.cn/post/6844904021308735502#heading-24" target="_blank" rel="noreferrer">浏览器灵魂之问</a></p><h4 id="网络请求" tabindex="-1">网络请求 <a class="header-anchor" href="#网络请求" aria-hidden="true">#</a></h4><ol><li>构建请求</li><li>查找强缓存</li><li><code>DNS（域名系统）</code>解析，把域名解析为 <code>IP</code></li><li>建立 <code>TCP</code> 连接，同一域名最多<code>6</code>个连接</li><li>三次握手建立连接 --&gt; 进行数据传输 --&gt; 4次挥手断开连接</li><li><code>TCP</code>连接建立完成，发送 <code>HTTP</code> 请求</li><li>服务器接收、处理请求，返回响应数据</li><li>如果请求头或者响应头中是否包含 <code>Connection: Keep-Alive</code>，表示持久连接，<code>TCP</code> 连接会保持，之后的请求会复用这个连接</li></ol><h4 id="解析" tabindex="-1">解析 <a class="header-anchor" href="#解析" aria-hidden="true">#</a></h4><ol><li>解析 <code>HTML</code> 文本构建 <code>DOM</code> 树</li><li>解析 <code>CSS</code> 文本转化为结构化对象 <code>StyleSheets</code>，标准化 <code>CSS</code> 样式数值，计算每个节点的具体样式</li><li>生成布局树：遍历生成的 <code>DOM</code> 树，添加到布局树中；计算布局树节点定位（ <code>head 标签</code>和 <code>display: node 的元素</code>不在布局树中）</li></ol><h4 id="渲染" tabindex="-1">渲染 <a class="header-anchor" href="#渲染" aria-hidden="true">#</a></h4><ol><li>建立图层树(<code>Layer Tree)</code></li><li>生成绘制列表</li><li>生成图块并栅格化</li><li>显示器显示内容</li></ol><h3 id="回流和重绘" tabindex="-1">回流和重绘 <a class="header-anchor" href="#回流和重绘" aria-hidden="true">#</a></h3><ul><li><code>重排（回流）：</code>当改变了盒子尺寸，位置，移动、删除、添加DOM，页面初始化，窗口尺寸变化都会造成重排，但是在不同情况下的影响程度是不一样的</li><li><code>重绘：</code>当修改了DOM的颜色，调整阴影等，他们对页面结构不会造成应该，所以只会使浏览器重绘</li></ul><blockquote><p>重排一定会引起重绘</p></blockquote><ol><li>缓存 <code>offsetTop</code>、<code>scrollTop</code>、<code>getBoundingClientRect</code> 等这些会引起浏览器强制重排的数据</li><li>使用 <code>position absolute fixed</code> 使 <code>dom</code> 脱离文档流</li><li>使用 <code>will-change</code> 开启 <code>GPU 硬件加速</code>，但是不建议使用过多，它更加占用内存</li><li>动画效果中 <code>transform</code> 比 <code>定位、margin</code> 更加高效，浏览器会为 <code>dom</code> 创建单独的 <code>GPU</code> 图层</li></ol><h3 id="xss攻击、csrf攻击" tabindex="-1">XSS攻击、CSRF攻击 <a class="header-anchor" href="#xss攻击、csrf攻击" aria-hidden="true">#</a></h3><p><strong>CSRF：</strong> <code>跨站请求伪造（CSRF）</code> 是一种冒充受信任用户，向服务器发送非预期请求的攻击方式。例如，这些非预期请求可能是通过在跳转链接后的 URL 中加入恶意参数来完成</p><p><strong>XSS:</strong> <code>跨站脚本攻击（Cross-site scripting，XSS）</code>是一种安全漏洞，攻击者可以利用这种漏洞在网站上注入恶意的客户端代码。当被攻击者登陆网站时就会自动运行这些恶意代码，从而，攻击者可以突破网站的访问权限，冒充受害者。</p><h3 id="https-http" tabindex="-1">HTTPS &amp; HTTP <a class="header-anchor" href="#https-http" aria-hidden="true">#</a></h3><p><a href="https://juejin.cn/post/6844904100035821575#heading-101" target="_blank" rel="noreferrer">HTTP 知识体系</a> <br><a href="https://juejin.cn/post/6844903471565504526" target="_blank" rel="noreferrer">详细解析 HTTP 与 HTTPS 的区别</a></p><ul><li><strong>HTTP：</strong> 是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准<code>（TCP）</code>，用于从<code>WWW</code>服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。</li><li><strong>HTTPS：</strong> 是以安全为目标的<code>HTTP</code>通道，简单讲是<code>HTTP</code>的安全版，即<code>HTTP</code>下加入<code>SSL</code>层，<code>HTTPS</code>的安全基础是<code>SSL</code>，因此加密的详细内容就需要<code>SSL</code>。</li></ul><h3 id="图片懒加载" tabindex="-1">图片懒加载 <a class="header-anchor" href="#图片懒加载" aria-hidden="true">#</a></h3><h3 id="tcp-和-udp" tabindex="-1"><code>TCP</code> 和 <code>UDP</code> <a class="header-anchor" href="#tcp-和-udp" aria-hidden="true">#</a></h3><p><a href="https://juejin.cn/post/6844904070889603085#heading-0" target="_blank" rel="noreferrer">链接</a></p><ul><li><strong>TCP:</strong> 面向连接的、可靠的、基于字节流的传输层协议</li><li><strong>UDP:</strong> 面向无连接的基于数据报的传输层协议</li></ul><h3 id="tcp-三次握手-四次挥手" tabindex="-1">TCP 三次握手 / 四次挥手 <a class="header-anchor" href="#tcp-三次握手-四次挥手" aria-hidden="true">#</a></h3><p><a href="https://juejin.cn/post/6844904070889603085#heading-1" target="_blank" rel="noreferrer">链接</a></p><h4 id="三次握手" tabindex="-1">三次握手 <a class="header-anchor" href="#三次握手" aria-hidden="true">#</a></h4><ul><li>最开始的时候，服务端和客户端都是 <code>Close</code> 状态</li><li>然后服务端启动服务，开始监听某个端口,变成了 <code>Listen</code> 状态</li><li>首先，客户端主动发起连接，发送 <code>SYN(同步) seq(序列号,由本地随机产生)=x</code>，自己变成 <code>SYN-SEND</code> 状态</li><li>服务端接收后，返回 <code>SYN ACK(对应客户端发送的SYN), ack(确认号)=x(收到的序列号)+1，seq=y</code>，自己变成 <code>SYN-RCVD</code> 状态</li><li>客户端接收，再发送 <code>ACK seq=x+1 cak=y+1</code> 给服务端，自己的状态变为 <code>ESTABLISHED</code> ，服务端接收到后状态也变成 <code>ESTABLISHED</code></li><li>然后就开始了数据传输</li></ul><blockquote><p><strong>为什么是三次握手</strong> <br> Tcp 是可靠的传输协议，为了保证数据的正常传输，服务端和客户端都需要确认对方的数据发送和接收能力，若改为两次握手，服务端无法确定自己的接收能力是否被客户端收到，若改为 4次或者5次 ，但是 3次握手已经足够确认双方的能力，多余的握手已经没有意义了</p></blockquote><h4 id="四次挥手" tabindex="-1">四次挥手 <a class="header-anchor" href="#四次挥手" aria-hidden="true">#</a></h4><ul><li>刚开始双方的状态都是 <code>ESTABLISHED</code></li><li>客户端准备断开连接，向服务端发送 <code>FIN</code> 报文，发送后客户端状态变为 <code>FIN-WAIT-1</code> ，注意这时候客户端变成了 <code>half-close(半关闭状态)</code> 即无法向服务端发送报文，只能接收</li><li>服务端接收后向服务端确认，状态变为 <code>CLOSE-WAIT </code></li><li>客户端收到服务端的确认，状态变为了 <code>FIN-WAIT2</code></li><li>随后服务端向客户端发送 <code>FIN</code> ，自己状态变为 <code>LAST-ACK</code></li><li>客户端收到服务端发来的 <code>FIN</code> 后，自己变成了 <code>TIME-WAIT</code> 状态，然后发送 <code>ACK</code> 给服务端</li><li>最后，客户端会等待 <code>2个MSL(Maximum Segment Lifetime，报文最大生存时间)</code>，这段时间内若客户端没有收到服务端的重发请求，则表示 <code>ACK</code> 成功，挥手结束，否则客户端重发 <code>ACK</code></li></ul><h3 id="前端跨域问题" tabindex="-1">前端跨域问题 <a class="header-anchor" href="#前端跨域问题" aria-hidden="true">#</a></h3><p><code>浏览器同源策略：</code> 同源策略可以阻止一部分的 <code>XSS</code> <code>CSRF</code> 攻击，同一个页面下，<code>不同域名、协议、端口号</code> 都属于不同源</p><ul><li>解决跨域问题主要看实际的场景，因为基本上跨域问题都无法单独在前端解决，都需要代理或者后端的支持；最常见的我们在开发中访问后端服务，若不使用 <code>node</code> 进行代理，就会在浏览器报跨域异常，现在的前后端分离的项目，在上线后，前后端使用了不同的服务器或者端口，也会出现跨域问题，这种情况我们会使用 <code>nginx</code> 进行代理。</li><li>其他的解决跨域问题，可以利用 <code>link</code> <code>script</code> <code>img</code> 标签的链接可以跨域的特性， 比如 <code>JSONP</code> ；还有需要浏览器和后端支持的 <code>cors</code>;</li><li><strong>JSONP</strong> 主要思路是，利用 <code>script</code> 标签可以访问跨域资源，后端返回一段脚本信息，把数据放到脚本中，前端加载完脚本后，执行完成会把数据赋值到全局变量，这样就达到跨域获取数据了</li></ul><h2 id="webpack" tabindex="-1">webpack <a class="header-anchor" href="#webpack" aria-hidden="true">#</a></h2><ul><li>loader 和 plugin 的区别</li><li>webpack 的简单构建流程</li></ul><h2 id="算法基础" tabindex="-1">算法基础 <a class="header-anchor" href="#算法基础" aria-hidden="true">#</a></h2><h2 id="数据结构" tabindex="-1">数据结构 <a class="header-anchor" href="#数据结构" aria-hidden="true">#</a></h2><h2 id="设计模式" tabindex="-1">设计模式 <a class="header-anchor" href="#设计模式" aria-hidden="true">#</a></h2><ul><li>创建型</li></ul><ol><li>单例模式</li><li>原型模式</li><li>工厂模式</li><li>抽象工厂模式</li><li>建造者模式</li></ol><ul><li>结构型</li></ul><ol start="6"><li>适配器模式</li><li>装饰器模式</li><li>代理模式</li><li>外观模式</li><li>桥接模式</li><li>组合模式</li><li>享元模式</li></ol><ul><li>行为型</li></ul><ol start="13"><li>观察者模式（发布—订阅模式）</li><li>迭代器模式</li><li>策略模式</li><li>模板方法模式</li><li>职责链模式</li><li>命令模式</li><li>备忘录模式</li><li>状态模式</li><li>访问者模式</li><li>中介者模式</li><li>解释器模式</li></ol>`,130),n=[c];function i(t,d,r,p,h,y){return l(),o("div",null,n)}const F=e(a,[["render",i]]);export{f as __pageData,F as default};
