import{_ as s,c as a,o as n,a1 as i}from"./chunks/framework.DSzkhk7e.js";const g=JSON.parse('{"title":"monorepo","description":"","frontmatter":{},"headers":[],"relativePath":"project-manager/monorepo.md","filePath":"project-manager/monorepo.md","lastUpdated":1716447218000}'),p={name:"project-manager/monorepo.md"},e=i(`<h1 id="monorepo" tabindex="-1">monorepo <a class="header-anchor" href="#monorepo" aria-label="Permalink to &quot;monorepo&quot;">​</a></h1><p><a href="https://en.wikipedia.org/wiki/Monorepo" target="_blank" rel="noreferrer">monorepo</a> 是一种软件开发策略，把多个项目放在同一个仓库下进行管理</p><h2 id="优势" tabindex="-1">优势 <a class="header-anchor" href="#优势" aria-label="Permalink to &quot;优势&quot;">​</a></h2><ul><li>易于代码的重用</li><li>易于依赖管理</li><li>利于跨团队协作</li></ul><h2 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h2><ul><li>项目的版本缺失</li><li>缺乏每个项目的权限控制</li><li>默认需要更多的存储空间</li></ul><h2 id="基于-pnpm-的-monorepo" tabindex="-1">基于 pnpm 的 monorepo <a class="header-anchor" href="#基于-pnpm-的-monorepo" aria-label="Permalink to &quot;基于 pnpm 的 monorepo&quot;">​</a></h2><p><a href="https://pnpm.io/zh/" target="_blank" rel="noreferrer">pnpm</a> 快速的，节省磁盘空间的包管理工具。</p><ul><li>节约磁盘空间并提升安装速度 <ul><li>如果你用到了某依赖项的不同版本，只会将不同版本间有差异的文件添加到仓库</li><li>所有文件都会存储在硬盘上的某一位置。 当软件包被被安装时，包里的文件会 <code>硬链接</code> 到这一位置，而不会占用额外的磁盘空间。 这允许你跨项目地共享同一版本的依赖。</li></ul></li><li>创建非扁平化的 <code>node_modules</code> 文件夹 <ul><li>默认情况下，pnpm 使用软链的方式将项目的直接依赖添加进模块文件夹的根目录</li></ul></li></ul><h2 id="pnpm-workspace-yaml" tabindex="-1">pnpm-workspace.yaml <a class="header-anchor" href="#pnpm-workspace-yaml" aria-label="Permalink to &quot;pnpm-workspace.yaml&quot;">​</a></h2><p><code>pnpm-workspace.yaml</code> 定义了 工作空间 的根目录，并能够使您从工作空间中包含 / 排除目录 。 默认情况下，包含所有子目录。</p><blockquote><p>即使使用了自定义目录位置通配符，根目录下的package目录也总是被包含</p></blockquote><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">packages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 所有包在 packages/ 的直接子目录内</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 所有包在 components/ 的子目录内</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;components/**&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 排除 test 目录中的包</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;!**/test/**&#39;</span></span></code></pre></div><h2 id="项目文件树" tabindex="-1">项目文件树 <a class="header-anchor" href="#项目文件树" aria-label="Permalink to &quot;项目文件树&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- monorepo-test</span></span>
<span class="line"><span>    - client</span></span>
<span class="line"><span>        - v3-demo</span></span>
<span class="line"><span>    - packages</span></span>
<span class="line"><span>        - utils</span></span>
<span class="line"><span>            - array</span></span>
<span class="line"><span>                - index.js</span></span>
<span class="line"><span>                - package.json</span></span>
<span class="line"><span>            - index.js</span></span>
<span class="line"><span>            - package.json</span></span>
<span class="line"><span>    - web</span></span>
<span class="line"><span>        - components</span></span>
<span class="line"><span>            - button</span></span>
<span class="line"><span>                - index.js</span></span>
<span class="line"><span>                - package.json</span></span>
<span class="line"><span>            - index.js</span></span>
<span class="line"><span>            - package.json</span></span>
<span class="line"><span>    - package.json</span></span>
<span class="line"><span>    - pnpm-workspace.yaml</span></span></code></pre></div><h2 id="pnpm-workspace-yaml-文件配置" tabindex="-1">pnpm-workspace.yaml 文件配置 <a class="header-anchor" href="#pnpm-workspace-yaml-文件配置" aria-label="Permalink to &quot;pnpm-workspace.yaml 文件配置&quot;">​</a></h2><ul><li><code>packages/*</code> 和 <code>packages/**</code> 的区别 <ul><li><code>packages/*</code> 他的直接子目录会作为单独的项目进行检测，<strong>比如上面的 <code>packages/utils/array</code> 就不会被检测到</strong></li><li><code>web/**</code> 他下级的所有目录都会作为单独的项目进行检测，<strong>比如上面的 <code>web/components/button</code> 就会被检测到</strong></li></ul></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>packages:</span></span>
<span class="line"><span>  - &quot;packages/*&quot;</span></span>
<span class="line"><span>  - &quot;client/*&quot;</span></span>
<span class="line"><span>  - &quot;web/**&quot;</span></span></code></pre></div><h2 id="monorepo-test-web-components-button-package-json" tabindex="-1">monorepo-test/web/components/button/package.json <a class="header-anchor" href="#monorepo-test-web-components-button-package-json" aria-label="Permalink to &quot;monorepo-test/web/components/button/package.json&quot;">​</a></h2><ul><li>在 <code>package.json</code> 中有三个比较重要的配置 <ul><li><code>name</code> 这就是安装时包的名称，尽量不使用用文件夹名称，这样容易和第三方的包名冲突，类似 <code>vue3</code> 源码更加倾向于用 <code>@monorepo-test/button</code> 这种方式命名</li><li><code>version</code> 是包的版本</li><li><code>main</code> 引入包的入口</li></ul></li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@monorepo-test/button&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;description&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {},</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;keywords&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;author&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;license&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ISC&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;lodash-es&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^4.17.21&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="本地依赖的安装" tabindex="-1">本地依赖的安装 <a class="header-anchor" href="#本地依赖的安装" aria-label="Permalink to &quot;本地依赖的安装&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 在根目录安装到指 定package_name 下</span></span>
<span class="line"><span>pnpm add &lt;本地 package_name / npm package_name&gt; --filter &lt;安装到此 package_name 下&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 不使用 --filter/-F 先进入到指定目录</span></span>
<span class="line"><span>pnpm add &lt;本地 package_name / npm package_name&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 在项目下任意目录安装到根目录下 --workspace/-w</span></span>
<span class="line"><span>pnpm add &lt;npm package_name&gt; -w</span></span></code></pre></div>`,23),l=[e];function t(o,h,c,k,r,d){return n(),a("div",null,l)}const m=s(p,[["render",t]]);export{g as __pageData,m as default};
